package dev.aura.powermoney.common.compat.sponge;

import dev.aura.powermoney.api.MoneyInterface;
import dev.aura.powermoney.api.PowerMoneyApi;
import dev.aura.powermoney.common.compat.PowerMoneyModules;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.math.BigDecimal;
import java.util.Optional;
import java.util.UUID;
import lombok.AccessLevel;
import lombok.Getter;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.event.cause.Cause;
import org.spongepowered.api.event.cause.EventContext;
import org.spongepowered.api.service.economy.Currency;
import org.spongepowered.api.service.economy.EconomyService;

public class SpongeMoneyInterface implements MoneyInterface {
  private final DirectInterface directInterface =
      PowerMoneyModules.spongeAPI() ? new DirectInterface() : null;

  @Override
  public String getName() {
    return PowerMoneyApi.RESOURCE_PREFIX + "sponge";
  }

  public boolean isSpongeLoaded() {
    return directInterface != null;
  }

  @Override
  public boolean canAcceptMoney() {
    return isSpongeLoaded() && directInterface.hasEconomyService();
  }

  @Override
  public void addMoneyToPlayer(UUID player, BigDecimal money) {
    if (!canAcceptMoney())
      throw new IllegalStateException(
          "Sponge or an EconomySerice is missing. Cannot accept money!");

    directInterface.addMoneyToPlayer(player, money);
  }

  @Override
  public String getCurrencySymbol() {
    return canAcceptMoney() ? directInterface.getMoneySymbol() : "$";
  }

  @Override
  public int getDefaultDigits() {
    return canAcceptMoney() ? directInterface.getDefaultDigits() : 2;
  }

  @SuppressFBWarnings(
    value = {"JLM_JSR166_UTILCONCURRENT_MONITORENTER", "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"},
    justification = "Code is generated by lombok which means I don't have any influence on it."
  )
  private static class DirectInterface {
    private final Optional<EconomyService> economyService =
        Sponge.getServiceManager().provide(EconomyService.class);

    @Getter(value = AccessLevel.PRIVATE, lazy = true)
    private final Currency currency = getCurrencyFromConfig();

    public boolean hasEconomyService() {
      return economyService.isPresent();
    }

    public void addMoneyToPlayer(UUID player, BigDecimal money) {
      verifyEconomyService();

      economyService
          .get()
          .getOrCreateAccount(player)
          .get()
          .deposit(
              getCurrency(), money, Cause.of(EventContext.empty(), PowerMoneyApi.getInstance()));
    }

    public String getMoneySymbol() {
      verifyEconomyService();

      return getCurrency().getSymbol().toPlain();
    }

    public int getDefaultDigits() {
      verifyEconomyService();

      return getCurrency().getDefaultFractionDigits();
    }

    private Currency getCurrencyFromConfig() {
      verifyEconomyService();

      final String currencyName = PowerMoneyApi.getInstance().getConfiguredCurrencyName();

      for (Currency currency : economyService.get().getCurrencies()) {
        if (currency.getId().equalsIgnoreCase(currencyName)
            || currency.getName().equalsIgnoreCase(currencyName)) {
          return currency;
        }
      }

      return economyService.get().getDefaultCurrency();
    }

    private void verifyEconomyService() {
      if (!hasEconomyService())
        throw new IllegalStateException("An EconomySerice is missing. Cannot accept money!");
    }
  }
}
