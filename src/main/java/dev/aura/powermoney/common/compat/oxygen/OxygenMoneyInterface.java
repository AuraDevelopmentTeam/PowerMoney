package dev.aura.powermoney.common.compat.oxygen;

import austeretony.oxygen_core.common.main.OxygenMain;
import austeretony.oxygen_core.server.api.CurrencyHelperServer;
import austeretony.oxygen_core.server.currency.CurrencyProvider;
import dev.aura.powermoney.api.MoneyInterface;
import dev.aura.powermoney.api.PowerMoneyApi;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.math.BigDecimal;
import java.util.UUID;
import lombok.AccessLevel;
import lombok.Getter;

@SuppressFBWarnings(
  value = {"JLM_JSR166_UTILCONCURRENT_MONITORENTER", "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"},
  justification = "Code is generated by lombok which means I don't have any influence on it."
)
public class OxygenMoneyInterface implements MoneyInterface {
  @Getter(value = AccessLevel.PRIVATE, lazy = true)
  private final CurrencyProvider currencyProvider = getCurrencyProviderFromConfig();

  @Getter(value = AccessLevel.PRIVATE, lazy = true)
  private final int currencyProviderIndex = getCurrencyProvider().getIndex();

  @Override
  public String getName() {
    return PowerMoneyApi.RESOURCE_PREFIX + OxygenMain.MODID;
  }

  @Override
  public boolean canAcceptMoney() {
    return true;
  }

  @Override
  public void addMoneyToPlayer(UUID player, BigDecimal money) {
    try {
      CurrencyHelperServer.addCurrency(player, money.longValue(), getCurrencyProviderIndex());
    } catch (NullPointerException e) {
      PowerMoneyApi.getLogger()
          .error("Oxygen does not have an account for a player with the UUID " + player, e);
    }
  }

  @Override
  public String getCurrencySymbol() {
    return getCurrencyProvider().getDisplayName();
  }

  @Override
  public int getDefaultDigits() {
    return 0;
  }

  private CurrencyProvider getCurrencyProviderFromConfig() {
    final String currencyName = PowerMoneyApi.getInstance().getConfiguredCurrencyName();

    for (CurrencyProvider currencyProvider : CurrencyHelperServer.getCurrencyProviders()) {
      if (Integer.toString(currencyProvider.getIndex()).equalsIgnoreCase(currencyName)
          || currencyProvider.getDisplayName().equalsIgnoreCase(currencyName)) {
        return currencyProvider;
      }
    }

    return CurrencyHelperServer.getCommonCurrencyProvider();
  }
}
