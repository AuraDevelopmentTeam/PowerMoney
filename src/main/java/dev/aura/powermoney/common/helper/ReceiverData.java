package dev.aura.powermoney.common.helper;

import dev.aura.powermoney.PowerMoney;
import dev.aura.powermoney.common.tileentity.TileEntityPowerReceiver;
import dev.aura.powermoney.network.packet.clientbound.PacketReceiverDisabled;
import dev.aura.powermoney.network.packet.clientbound.PacketSendReceiverData;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.UUID;
import java.util.regex.Pattern;
import lombok.AccessLevel;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.FieldDefaults;
import lombok.experimental.UtilityClass;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraftforge.fml.common.network.simpleimpl.IMessage;

@SuppressFBWarnings(
    value = {"JLM_JSR166_UTILCONCURRENT_MONITORENTER", "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"},
    justification = "Code is generated by lombok which means I don't have any influence on it.")
@Data
@Setter(AccessLevel.NONE)
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@FieldDefaults(makeFinal = true, level = AccessLevel.PROTECTED)
public class ReceiverData {
  @EqualsAndHashCode.Include protected final boolean waiting;
  @EqualsAndHashCode.Include protected final boolean enabled;
  @EqualsAndHashCode.Include protected final long localEnergyPerSecond;
  @EqualsAndHashCode.Include protected final long totalEnergyPerSecond;
  @EqualsAndHashCode.Include protected final BigDecimal moneyPerSecond;
  @EqualsAndHashCode.Include protected final String moneySymbol;
  @EqualsAndHashCode.Include protected final int defaultDigits;

  @Getter(value = AccessLevel.PROTECTED, lazy = true)
  private final DecimalFormatSymbols formatSymbols = generateFormatSymbols();

  @Getter(value = AccessLevel.PROTECTED, lazy = true)
  private final DecimalFormat intFormat = generateIntFormat();

  @Getter(value = AccessLevel.PROTECTED, lazy = true)
  private final DecimalFormat decimalFormat = generateDecimalFormat();

  @Getter(lazy = true)
  private final String localEnergyFormatted = generateEnergyFormatted(localEnergyPerSecond);

  @Getter(lazy = true)
  private final String totalEnergyFormatted = generateEnergyFormatted(totalEnergyPerSecond);

  @Getter(lazy = true)
  private final String moneyFormatted = generateMoneyFormatted();

  @Getter(lazy = true)
  private final String[] headings = generateHeadings();

  @Getter(lazy = true)
  private final String message = generateMessage();

  @Getter(lazy = true)
  private final String notYouMessage = generateNotYouMessage();

  public static ReceiverData createWaiting() {
    return new ReceiverData(true);
  }

  public static ReceiverData createReceiverDisabled() {
    return new ReceiverData(false);
  }

  public static ReceiverData createReceiverData(
      long localEnergy, long totalEnergy, BigDecimal money) {
    return createReceiverData(
        localEnergy,
        totalEnergy,
        money,
        PowerMoney.getInstance().getActiveMoneyInterface().getCurrencySymbol(),
        PowerMoney.getInstance().getActiveMoneyInterface().getDefaultDigits());
  }

  public static ReceiverData createReceiverData(
      long localEnergy, long totalEnergy, BigDecimal money, String moneySymbol, int defaultDigits) {
    return new ReceiverData(localEnergy, totalEnergy, money, moneySymbol, defaultDigits);
  }

  public String formatOwnerName(TileEntityPowerReceiver tileEntity, EntityPlayer player) {
    return formatOwnerName(tileEntity, player.getUniqueID());
  }

  public String formatOwnerName(TileEntityPowerReceiver tileEntity, UUID player) {
    final String ownerName = tileEntity.getOwnerName();

    if (player.equals(tileEntity.getOwner())) {
      return ownerName;
    } else {
      return ownerName + getNotYouMessage();
    }
  }

  public IMessage getPacket() {
    if (enabled) {
      return new PacketSendReceiverData(
          localEnergyPerSecond, totalEnergyPerSecond, moneyPerSecond, moneySymbol, defaultDigits);
    } else {
      return new PacketReceiverDisabled();
    }
  }

  protected ReceiverData(boolean waiting) {
    this.waiting = waiting;
    enabled = false;
    localEnergyPerSecond = 0L;
    totalEnergyPerSecond = 0L;
    moneyPerSecond = null;
    moneySymbol = null;
    defaultDigits = 0;
  }

  protected ReceiverData(
      long localEnergy, long totalEnergy, BigDecimal money, String moneySymbol, int defaultDigits) {
    waiting = false;
    enabled = true;
    localEnergyPerSecond = localEnergy;
    totalEnergyPerSecond = totalEnergy;
    moneyPerSecond = money;
    this.moneySymbol = moneySymbol;
    this.defaultDigits = defaultDigits;
  }

  protected DecimalFormatSymbols generateFormatSymbols() {
    final DecimalFormatSymbols formatSymbols = new DecimalFormatSymbols();
    formatSymbols.setDecimalSeparator('.');
    formatSymbols.setGroupingSeparator(',');

    return formatSymbols;
  }

  protected DecimalFormat generateIntFormat() {
    final DecimalFormat intFormat = new DecimalFormat();
    intFormat.setMaximumFractionDigits(0);
    intFormat.setMinimumFractionDigits(0);
    intFormat.setGroupingUsed(true);
    intFormat.setDecimalFormatSymbols(getFormatSymbols());

    return intFormat;
  }

  protected DecimalFormat generateDecimalFormat() {
    final DecimalFormat decimalFormat = new DecimalFormat();
    decimalFormat.setMaximumFractionDigits(defaultDigits);
    decimalFormat.setMinimumFractionDigits(defaultDigits);
    decimalFormat.setGroupingUsed(true);
    decimalFormat.setDecimalFormatSymbols(getFormatSymbols());

    return decimalFormat;
  }

  protected String generateEnergyFormatted(long energy) {
    return Translator.transformFormattedNumber(getIntFormat().format(energy))
        + ' '
        + Translator.translateKeyForTOP("gui.powermoney.energyunit")
        + Translator.translateKeyForTOP("gui.powermoney.persecond");
  }

  protected String generateMoneyFormatted() {
    return Translator.transformFormattedNumber(getDecimalFormat().format(moneyPerSecond))
        + ' '
        + moneySymbol
        + Translator.translateKeyForTOP("gui.powermoney.persecond");
  }

  protected String[] generateHeadings() {
    return new String[] {
      Translator.translateKeyForTOP("gui.powermoney.owner"),
      Translator.translateKeyForTOP("gui.powermoney.localenergy"),
      Translator.translateKeyForTOP("gui.powermoney.totalenergy"),
      Translator.translateKeyForTOP("gui.powermoney.totalearning")
    };
  }

  protected String generateMessage() {
    return waiting
        ? Translator.translateKeyForTOP("gui.powermoney.waiting")
        : Translator.translateKeyForTOP("gui.powermoney.disabled");
  }

  protected String generateNotYouMessage() {
    return " (" + Translator.translateKeyForTOP("gui.powermoney.owner.notyou") + ')';
  }

  // Little helper class
  @UtilityClass
  public static class Translator {
    private static final String STARTLOC = "{*";
    private static final String ENDLOC = "*}";

    private static final String decimalSeparator =
        translateKeyForTOP("gui.powermoney.decimalseparator");
    private static final String groupSeparator =
        translateKeyForTOP("gui.powermoney.groupingseparator");

    private static final Pattern seperatorPattern =
        Pattern.compile("(?<=[,.])(?![,.])|(?<![,.])(?=[,.])");

    public static String translateKeyForTOP(String translationKey) {
      return STARTLOC + translationKey + ENDLOC;
    }

    private static String transformFormattedNumber(String number) {
      final StringBuilder builder = new StringBuilder();

      for (final String piece : seperatorPattern.split(number)) {
        if (".".equals(piece)) {
          builder.append(decimalSeparator);
        } else if (",".equals(piece)) {
          builder.append(groupSeparator);
        } else {
          builder.append(piece);
        }
      }

      return builder.toString();
    }
  }
}
